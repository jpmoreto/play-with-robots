#ifndef MOTORS_CONTROL_H
#define MOTORS_CONTROL_H

#include <PhotoSpeedSendor.h>

class MotorsControl {

public:
  MotorsControl(int STBYIoPin,
                int rightIN1IoPin, int rightIN2IoPin,
                int  leftIN1IoPin, int  leftIN2IoPin,
                int frontRightMotorPwmIoPin, int frontLeftMotorPwmIoPin,
                int  backRightMotorPwmIoPin, int  backLeftMotorPwmIoPin,
                int frontRightSensorInterruptPin, int frontRightSensorIoPin,
                int frontLeftSensorInterruptPin, int frontLeftSensorIoPin,
                int backRightSensorInterruptPin, int backRightSensorIoPin,
                int backLeftSensorInterruptPin, int backLeftSensorIoPin);
  void setup();

  void setLeftSpeed(int leftSpeed);
  void setRightSpeed(int rightSpeed);
  void setAcceleration(int acceleration);

  void resetSensorReads();
  void controlSpeed(unsigned long actualTimeMicros);

  static const long sensorTicksUnit = 10000;

  static const long minAcceleration = sensorTicksUnit / 2;
  static const int tiksPerRevolution = 100;
  static const int wheelDiameter = 650; // milimiter/10

private:
  class Motor {

  public:
    Motor(int pwmIoPin);
    void setup();

    void setPower(int power);
    int getPower();

    static const int maxPower = 255;
    static const int maxIncrementPower = 5;

    long setSpeedPrev;
    int setPowerPrev;
  private:
    int pwmIoPin;
    int power;
  };

  class MotorSideControler {

  public:
    MotorSideControler(
      int in1IoPin, int in2IoPin,
      int backMotorPwmIoPin, int frontMotorPwmIoPin,
      int backSensorInterruptPin, int backSensorIoPin,
      int frontSensorInterruptPin, int frontSensorIoPin);

    // expected ticks - current ticks
    int ticksAccumulatedError;
    int direction; // -1 => backward; 0 => stopeed; 1 => forward

    Motor frontMotor;
    Motor backMotor;

    PhotoSpeedSensor frontSensor;
    PhotoSpeedSensor backSensor;

    // sensor ticks / 10 000 micro second
    long speedTarget;

    void setup();
    void runBackward();
    void runForward();
    void stop();
    void resetSensorReads();
    long expectedTiks(unsigned long deltaTMicroSec);
  private:
    const int in1IoPin;
    const int in2IoPin;
  };

  MotorSideControler left;
  MotorSideControler right;

  void setStandby(const bool standby);

  unsigned long getDeltaTime(const unsigned long actualTimeMicros);

  float getSpeedRatio(long expectTiks, long accumulatedError, int speedSensor, unsigned long deltaTMicroSec);
  static int getPower(long& speedAct, float powerRatio, long speedTarget, Motor motor, unsigned long timeAct);
  static int calculatePower(long& speedAct, long speed, int actPower);

  unsigned long previousTime;

  int STBYIoPin;

  // sensor ticks/ 10 000 micro secondÂ²
  long accelerationTarget;

  // motorsState
  //
  bool isStandby;
};

#endif
