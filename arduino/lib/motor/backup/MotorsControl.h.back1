#ifndef MOTORS_CONTROL_H
#define MOTORS_CONTROL_H

#include <PhotoSpeedSendor.h>
#include <Pid1.h>

class MotorsControl {

public:
  MotorsControl(int STBYIoPin,
                int rightIN1IoPin, int rightIN2IoPin,
                int  leftIN1IoPin, int  leftIN2IoPin,
                int frontRightMotorPwmIoPin, int frontLeftMotorPwmIoPin,
                int  backRightMotorPwmIoPin, int  backLeftMotorPwmIoPin,
                int frontRightSensorInterruptPin, int frontRightSensorIoPin,
                int frontLeftSensorInterruptPin, int frontLeftSensorIoPin,
                int backRightSensorInterruptPin, int backRightSensorIoPin,
                int backLeftSensorInterruptPin, int backLeftSensorIoPin);
  void setup();

  void setLeftSpeed(int leftSpeed); // ticks per second
  void setRightSpeed(int rightSpeed); // ticks per second
  void setLoopPeriod(int period); // time interval in ms bettwen calls to controlSpeed

  void setKp(long kp); // set proporcional multiplier factor;
  void setKi(long ki); // set integral multiplier factor;
  void setKd(long kd); // set diferencial multiplier factor;
  void setMultScale(long scale); // the unit of multipliers are multiplier / scale

  void resetSensorReads();
  void controlSpeed();

private:
  class Motor {

  public:
    Motor(int pwmIoPin, int in1IoPin, int in2IoPin);
    void setup();

    void setPower(int pv);
    int getPower();

    Pid1 controler;

    static const int maxPower = 255;
    static const int maxIncrementPower = 5;
  private:

    void runBackward();
    void runForward();
    void stop();

    const int pwmIoPin;
    const int in1IoPin;
    const int in2IoPin;

    int lastPower;
    int direction; // -1 => backward; 0 => stoped; 1 => forward
  };

  class MotorSideControler {

  public:
    MotorSideControler(
      int in1IoPin, int in2IoPin,
      int backMotorPwmIoPin, int frontMotorPwmIoPin,
      int backSensorInterruptPin, int backSensorIoPin,
      int frontSensorInterruptPin, int frontSensorIoPin);

    Motor frontMotor;
    Motor backMotor;

    PhotoSpeedSensor frontSensor;
    PhotoSpeedSensor backSensor;

    void setSpeed(int leftSpeed); // ticks per loop period

    void setup();
    void resetSensorReads();

  private:
  };

  MotorSideControler left;
  MotorSideControler right;

  void setStandby(const bool standby);

  int STBYIoPin;

  // motorsState
  //
  bool isStandby;

  int loopPeriod;
};

#endif
